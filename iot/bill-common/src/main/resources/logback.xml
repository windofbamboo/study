<?xml version="1.0" encoding="UTF-8"?>
<!-- 
级别包括：TRACE、DEBUG(默认)、INFO、WARN 和 ERROR
scan:
当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod:
设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug:
当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
<!-- 	通过<property>定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。
		<contextName>myAppName</contextName>  
		<timestamp key="bySecond" datePattern="yyyyMMdd'T'HHmmss"/> 
		<property name="APP_Name" value="myAppName" />   
-->
	<property name="path.log" value="./log" />   
    <appender name="FILE"   class="ch.qos.logback.core.FileAppender">
    	<Encoding>UTF-8</Encoding>
        <File>logger-default.log</File>
        <Append>true</Append>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>[%d{yyyy-MM-dd HH:mm:ss} %-5level %thread  %file:%line] %logger{36} --&gt; %msg%n</Pattern>
        </layout>
    </appender>
    <appender name="ROLLING_FILE"  class="ch.qos.logback.core.rolling.RollingFileAppender">
         <Encoding>UTF-8</Encoding>
         <File>${path.log}/default.log</File>
         <Prudent>true</Prudent>
         <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
             <FileNamePattern>${path.log}/default-%d{yyyy-MM-dd_HH}-%i.log</FileNamePattern>
             <MaxHistory>24</MaxHistory>
             <TimeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
             <MaxFileSize>50MB</MaxFileSize>
             </TimeBasedFileNamingAndTriggeringPolicy>
         </rollingPolicy>
         <layout class="ch.qos.logback.classic.PatternLayout">
             <Pattern>[%d{yyyy-MM-dd HH:mm:ss} %-5level %thread  %file:%line] %logger{36} --&gt; %msg%n</Pattern>
         </layout>
     </appender>
     <!-- encoder 默认配置为PatternLayoutEncoder -->
     <appender name="STDOUT"  class="ch.qos.logback.core.ConsoleAppender" >
     	<layout class="ch.qos.logback.classic.PatternLayout">
     	<pattern>[%d{yyyy-MM-dd HH:mm:ss} %-5level %thread  %file:%line] %logger{36} --&gt; %msg%n</pattern>
     	</layout>
     </appender>
	<!-- logback为java中的包 -->   
  <logger name="Logback">   
  		<level value="WARN" /><!-- "TRACE", "DEBUG" -->
  </logger> 
  <!--类的全路径:过滤下面的信息 -->
  <logger name="com.alibaba.jstorm.task.master.heartbeat.TaskHeartbeatUpdater" level="WARN" additivity="false" />  
  <logger name="com.alibaba.jstorm.metric.AsmMetricRegistry" level="WARN" additivity="false" />  
  <logger name="shade.storm.org.apache.zookeeper.server.ZooKeeperServer" level="WARN" additivity="false" />  
  <logger name="shade.storm.org.apache.zookeeper.ZooKeeper" level="WARN" additivity="false" />  
  <logger name="shade.storm.org.apache.zookeeper.ClientCnxn" level="WARN" additivity="false" />  
  <logger name="org.apache.kafka.common.consumer.internals.Fetcher" level="WARN" additivity="false" />  
  <!--trace,debug,info,warn,error-->
  <root level="info,warn,error">
        <appender-ref ref="ROLLING_FILE" />
        <appender-ref ref="STDOUT" />
  </root>
</configuration>
<!-- 通过JVM变量方式来设置日志文件名，这个方式适用于单线程和多线程环境，但是MDC不适用多线程环境，特别是当MDC.put()方法的调用是非主线程的情况，比如javaEE项目就不适合这么做。根据对MDC的了解，MDC主要适用于须要在同一个进程中对不同的线程输出不同的日志格式，或输出到不同的文件这种场景，比如web项目，针对不同的用户请求，在日志中加入用户的信息，或者是不同的任务日志输出到不同的文件。
而对于须要将不同模块进程的日志输出到不同的文件，共用logback.xml, 则可以使用jvm参数传递变量的方式。
 -->
<!-- <?xml version="1.0" encoding="UTF-8"?>
<configuration>

    <appender name="FILE_MDC" class="ch.qos.logback.classic.sift.SiftingAppender">
        <discriminator>
            <Key>test-variable</Key>
            <DefaultValue>default</DefaultValue>
        </discriminator>
        <sift>
            <appender name="FILE"
                      class="ch.qos.logback.core.FileAppender">
                <File>test-logger-${test-variable}.log</File>
                <Append>true</Append>
                <layout class="ch.qos.logback.classic.PatternLayout">
                    <Pattern>%date %level [%thread] %logger{10} [%file:%line] %msg%n</Pattern>
                </layout>
            </appender>
        </sift>
    </appender>
    <root level="debug">
        <appender-ref ref="FILE_MDC" />
    </root>
</configuration> -->